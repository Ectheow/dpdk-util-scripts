#!/usr/bin/python
import sqlite3
import sys
import argparse
import dokuwiki
import getpass
import re

'''
outout-results-table.py
Input:
    sqlite database generated by Spirent Test Application, the TestResultsSummary database.
Output:
    * HTML table representing basic need-to-know info about the test.
    OR
    * Create a page according to other input parameters as well as filename, with the results
    OR
    * insert results table and accompanying description into a 'section' on the wiki where a section is:
      

      Section ::= BARRIER WS IDENTIFIER TEXT WS BARRIER
      BARRIER ::= "----\n"
      IDENTIFIER ::= "[\w\d\-\s]+\n"
      TEXT    ::=  .*\n
                   | WS
                   | TEXT
      WS ::= "\n" | " " | "\t" 

Usage:
    ./output-results-table.py [--insert-wiki|--create-wiki] [--divname] [--pagename] [--description]
'''

COLUMNS=['FrameSize', 'ThroughputRate', 'Throughput', 'TxFrameRate', 'Result', 'MinLatency', 'AvgLatency', 'MaxLatency']
SIMPLE_QUERY='SELECT  {} from Rfc2544ThroughputPerFrameSizeResult'.format(','.join(COLUMNS))

SECTION_DELIMIT_REGEX = re.compile(r'\s*\-\-\-\-\s*$')


def get_table_html_for_database(filename, description=None, columns=COLUMNS):
    output = ""
    conn = sqlite3.connect(filename)
    cursor = conn.cursor()

    if description is not None:
        output += "<p>\n{}\n</p>\n".format(description)

    output += ("<table>\n")
    output += ("<tr>\n")
    for i in columns:
        output += "<td>{}</td>\n".format(i)
    output += ("</tr>\n")
    for row in cursor.execute(SIMPLE_QUERY):
        output += ("<tr>\n")
        for col in row:
            output += ("<td>{}</td>\n".format(col))
        output += ("</tr>\n")
    output += ("</table>\n")
    return output

def login_to_wiki(wiki, username, password):
    if username is None or username == '-':
        username = raw_input('wiki username: ')

    print("username {}".format(username))
    if password is None or password == '-':
        password = getpass.getpass('wiki password: ')

    if not wiki.login(username, password):
        print("Failed to login")
        raise SystemExit(1)

def do_insert_wiki(filename,
                   url,
                   pagename,
                   results_section,
                   username,
                   password,
                   description=None,
                   columns=COLUMNS):
    wiki = dokuwiki.DokuWiki(url, verify=False)
    login_to_wiki(wiki, username, password)
    current_lines = wiki.get_page(pagename).split('\n')


    have_begun = False
    output = ''
    lines_iter = iter(current_lines)
    done=False
    line = next(lines_iter)
    entered = False

    while line != None:
        if re.match(SECTION_DELIMIT_REGEX, line) and not done:
            if entered and not done:
                output += "<html>" + get_table_html_for_database(filename, description, columns) + "</html>\n"
                done = True
                entered = False
                output += line + '\n'
                line = next(lines_iter, None)
                continue
            else:
                output += line + '\n'
                nextline = next(lines_iter, None)
                while nextline is not None and re.match(r'^\s*$', nextline):
                    output += nextline + '\n'
                    nextline = next(lines_iter, None)
                if nextline == None:
                    break
                elif nextline.strip() == results_section and not done and not entered:
                    entered = True
                output += nextline + '\n'
        else:
            output += line + '\n'

        line = next(lines_iter, None)
        
    wiki.put_page(pagename, output)


def do_create_wiki(filename,
                   url,
                   pagename,
                   username,
                   password,
                   description=None,
                   columns=COLUMNS):
    wiki = dokuwiki.DokuWiki(url, verify=False)
    login_to_wiki(wiki, username, password)
    wiki.put_page(pagename, "<html>\n" + get_table_html_for_database(filename, description, columns) + "</html>\n")

def do_print_simple_table(filename, description=None):
    print(get_table_html_for_database(filename, description))

def main(args):
    parser = argparse.ArgumentParser()

    parser.add_argument('--action',
                        default="simple-print")
    parser.add_argument('--insert-wiki',
                        action='store_const',
                        const='insert',
                        dest='action',
                        help='Edit a wiki page with the test results. Requires --pagename and --divename')
    parser.add_argument('--create-wiki',
                        action='store_const',
                        const='create',
                        dest='action',
                        help='Create a wiki page with the test results. Requires --pagename')
    parser.add_argument('--secname',
                        default=None,
                        help='Section in the wiki, e.g. the text for \'secname\' should appear on a line of it\'s own after a line of ---.')

    parser.add_argument('--wiki-url',
                        default=None,
                        help='wiki URL that dokuwiki is at.')

    parser.add_argument('--username',
                        default=None,
                        help='wiki username for login')
    parser.add_argument('--password',
                        default='-',
                        help='wiki password')
    parser.add_argument('--pagename',
                        default=None,
                        help='dokuwiki page name to edit/create.')
    parser.add_argument('--description',
                        default='',
                        help='Descriptive text to be added to a paragraph')
    parser.add_argument('--database',
                        default=None,
                        required=True,
                        help='database file to print as a table')
    parser.add_argument('--columns',
                        default=','.join(COLUMNS),
                        help='csv separated list of columns to select from the database')



    pargs = parser.parse_args(args)
    if pargs.action == 'simple-print':
        do_print_simple_table(pargs.database, pargs.description, pargs.columns.split(','))
    elif pargs.action == 'create':
        do_create_wiki(pargs.database,
                        pargs.wiki_url,
                        pargs.pagename,
                        pargs.username,
                        pargs.password,
                        pargs.description,
                        pargs.columns.split(','))
    elif pargs.action == 'insert':
        do_insert_wiki(
                pargs.database,
                pargs.wiki_url,
                pargs.pagename,
                pargs.secname,
                pargs.username,
                pargs.password,
                pargs.description,
                pargs.columns.split(','))
    else:
        sys.exit(1)



if __name__ == '__main__':
    main(sys.argv[1:])

